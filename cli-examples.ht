Title: Command Line Interpreter Examples

<h3>Command Line Interpreter Examples</h3>

<p>The programming style imposed by PyQt (and other GUI toolkit wrappers) is to
  create an application instance with some widgets and to enter into an event
  loop that locks you from the Python command line interpreter or an enhanced
  interpreter like <a href="http://ipython.scipy.org">IPython</a>.
</p>

<p>PyQwt includes the <tt class="module">iqt</tt> module that allows to:</p>

<ul>
  <li>create and control (Py)Qt widgets from the command line interpreter.</li>
  <li>interact with those widgets through (Py)Qt's GUI.</li>
</ul>

<p>The <tt class="module">iqt</tt> module requires the <tt class="module">
  readline</tt> module.
  <b class="program">PyCute</b>, a Python shell for PyQt and included with
  PyQwt, is an alternative for Python systems without a <tt class="module">
  readline</tt> module (MicroSoft Visual C).
</p>

<p>A step by step example follows:</p>

<ol>
  <li>
    Start <b class="program">PyCute</b> and go to the next step
    or start <b class="program">python</b> (or <b class="program">ipython</b>)
    and type:
    <pre class="cli">
>>> import iqt
    </pre>
    to create an application instance and to put an event processing function
    on the event hook of the readline module.
    The GNU readline library closes the event loop by calling this function at
    a maximum rate of 10 times per second while reading the keyboard input. 
  </li>
  <li>
    The module <tt class="module">qwt.qplt</tt> provides an interpreter
    friendly interface to the QwtPlot class. Type:
    <pre class="cli">
>>> from qwt.qplt import *
    </pre>
    to load the classes <tt class="class">Plot</tt>,
    <tt class="class">IPlot</tt>, <tt class="class"> Curve</tt>,
    <tt class="class">Axis</tt>, <tt class="class">Pen</tt> and
    <tt class="class">Symbol</tt>.
  </li>
  <li>
    Type:
    <pre class="cli">
>>> x = arange(-2*pi, 2*pi, 0.01)
    </pre>
    to create an array of x-values, ranging from -2*pi to 2*pi with a step size
    of 0.01.
  </li>
  <li>
    Type:
    <pre class="cli">
>>> p = Plot(Curve(x, cos(x), Pen(Magenta, 2), "cos(x)"),
...          Curve(x, exp(x), Pen(Red), "exp(x)", Right),
...          Axis(Right, Logarithmic),
...          "PyQwt using Qwt-%s -- http://qwt.sf.net" % QWT_VERSION_STR)
    </pre>
    to show a plot with two curves, a linear x-axis, a linear y-axis, a
    logarithmic y-axis and a title.
    <p><img alt="plot with two curves" src="examples/CliDemo1.png"
            width=600 height=400 border=1></p>
    A <tt class="class">Plot</tt> widget has hidden features:
    <ul>
      <li>
        toggle the visibility of each curve by clicking on its legend item.
      </li>
      <li>
        zooming and unzooming uses an infinite deep stack:
        <ul>     
          <li>left-click&amp;drag&amp;release to zoom</li>
          <li>right-click to unzoom to the previous zoom selection</li>
          <li>middle-click to unzoom to the initial state</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    There is also an <tt class="class">IPlot</tt> widget that adds a few
    interactive buttons to <tt class="class">Plot</tt> to facilitate printing
    to a printer and or (E)PS file and to clone the plot into Grace.
    Grace is an interactive plotting program producing hardcopy output that
    is better suited for LaTeX documents and scientific journals. 
    Type:
    <pre class="cli">
>>> p = IPlot(Curve(x, cos(x), Pen(Magenta, 2), "cos(x)"),
...           Curve(x, exp(x), Pen(Red), "exp(x)", Right),
...           Axis(Right, Logarithmic),
...           "PyQwt using Qwt-%s -- http://qwt.sf.net" % QWT_VERSION_STR)
    </pre>
    to show it.
  </li>
  <li>
    Type:
    <pre class="cli">
>>> x = x[0:-1:10]
    </pre>
    to create a new array of x-values by selecting every 10th element of the
    old array.
  </li>
  <li>
    Type:
    <pre class="cli">
>>> p.plot(Curve(x, cos(x-pi/4), Symbol(Circle, Yellow), "circle"),
...        Curve(x, cos(x+pi/4), Pen(Blue), Symbol(Square, Cyan), "square"))
    </pre>
    to add two more curves to the plot.
    <p><img alt="plot with four curves" src="examples/CliDemo2.png"
            width=700 height=500 border=1></p>
  </li>
</ol>

<p>
See the <a href="doc/qwt-qplt.html">qwt.qplt documentation</a> for detailed
information.
</p>

<!--
Local Variables:
mode: HTML
End:
-->
