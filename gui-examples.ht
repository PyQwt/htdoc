Title: Graphical User Interface Examples

<h3>Graphical User Interface Examples</h3>

<p>You have to understand Qt's SIGNAL and SLOT mechanism to develop GUI
  programs with PyQt and PyQwt.
  The chapter "Signal and Slot Support" in PyQt's documentation together with
  the overview "Signals and Slots" in Qt's documentation is sufficient for 
  experienced programmers.
  A good start for newbies is Boudewijn Rempt's
  "GUI Programming with Python Using the Qt Toolkit" <a href=
  "http://www.opendocs.org/pyqt/">online book</a> or <a href=
  "https://secure.linuxports.com/opendocs/">paper copy</a>.
</p>


<h5><a href="examples/DataDemo.py.html">DataDemo.py</a> demonstrates</h5>
<ul>
  <li>
    how to use <tt class="class">QwtPlot</tt>.
  </li>
  <li>
    how to produce timer events.
  </li>
  <li>
    how to handle timer events by reimplementing
    <tt class="function">QObject.timerEvent()</tt>.
  </li>
</ul>

<p><img alt="DataPlot Widget" src="examples/DataDemo.png"
        width=500 height=300 border=1>
</p>


<h5><a href="examples/StackOrder.py.html">StackOrder.py</a> demonstrates</h5>
<ul>
  <li>
    how to enable plot cursor tracking.
  </li>
  <li>
    how to derive <tt class="class">QwtBarCurve</tt> from <tt class="class">
    QwtPlotCurve</tt>.
  </li>
  <li>
    how to use a <tt class="class">QwtCounter</tt> instance to control the
    number of bars to display.
  </li>
  <li>
    how to use <tt class="class">QComboBox</tt> instances to control outline
    and fill colors of the bars.
  </li>
  <li>
    how to use <tt class="class">QwtPlotZoomer</tt>.
  </li>
  <li>
    how to configure the <tt class="class">QwtPlotZoomer</tt> by attaching
   different sets of mouse events to different zoomer actions.
  </li>
</ul>

<p><img alt="StackOrder Widget" src="examples/StackOrder.png"
        width=600 height=600 border=1></p>


<h5><a href="examples/BodeDemo.py.html">BodeDemo.py</a> demonstrates a new
feature in the future PyQwt-3.8</h5>
<ul>
  <li>
    improved rendering of scientific formula's by a combination of rich text
    and unicode.
  </li>
</ul>
<p>Testing on Linux requires:
<ol>
  <li>
    code from the CVS repositories of Qwt and PyQwt.
  </li>
  <li>
    the <a href=
    "http://corefonts.sourceforge.net">MicroSoft True Type Core Fonts</a>.
  </li>
  <li>
    printing requires configuration of ghostscript for the true type fonts.
    Study the 'MicroSoft True Type Core Fonts' part in my <a href=
    "examples/Fontmap.GS">Mandrake-8.2 Fontmap.GS</a> to see how to modify your
    Fontmap or Fontmap.GS file.
    Keep backups, because ghostscript chokes on syntax errors.
    The <a href="http://tldp.org/HOWTO/TT-Debian-4.html">chapter on printing in
    the TrueType Fonts in Debian mini-HOWTO</a> is a useful, but slightly dated
    reference.
    The <a href=
    "http://loll.sourceforge.net/linux/links/X_Window_System/Fonts/index.html">
    Loads of Linux Links</a> site points to more information on configuring
    fonts.
  </li>
</ol>
</p>

<p><img alt="BodeDemo Widget" src="examples/BodeDemo.png"
        width=540 height=400 border=1>
</p>

<p>Notes:
<ol>
  <li>
    the Verdana font works best (due QPrinter limitations and bugs?).
  </li>
  <li>
    use as much unicode as possible.
  </li>
  <li>
    The unicode codes for supported glyphs can be found in the unicodetoglyph
    table in qt-x11-free-x.x.x/kernel/qpsprinter.cpp.
  </li>
  <li>
    fall back on rich text if a requested glyph is missing from the font
    (sub-scripts are missing).
  </li>
</ol> 
I am working on better instructions.
</p>


<!--
Local Variables:
mode: HTML
End:
-->
