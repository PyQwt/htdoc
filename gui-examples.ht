Title: Graphical User Interface Examples

<h1>PyQwt Graphical User Interface Examples</h1>

<p>You have to understand Qt's SIGNAL and SLOT mechanism to develop GUI
  programs with PyQt and PyQwt.
  The chapter "Signal and Slot Support" in PyQt's documentation together with
  the overview "Signals and Slots" in Qt's documentation is sufficient for 
  experienced programmers.
  A cheap start for newbies is Boudewijn Rempt's
  "GUI Programming with Python Using the Qt Toolkit" <a href=
  "http://www.commandprompt.com/community/pyqt/">online book</a>.
  Serious programmers should check out Mark Summerfeld's
  "Rapid GUI Programming with Python and Qt" <a href=
  "http://www.qtrac.eu/pyqtbook.html">paper book</a>.
</p>


<h5><a href="examples/BarPlotDemo.py.html">BarPlotDemo.py</a> demonstrates</h5>
<ul>
  <li>
    how to enable plot cursor tracking.
  </li>
  <li>
    how to derive <tt class="class">QwtBarCurve</tt> from <tt class="class">
    QwtPlotCurve</tt>.
  </li>
  <li>
    how to use a <tt class="class">QwtCounter</tt> instance to control the
    number of bars to display.
  </li>
  <li>
    how to use <tt class="class">QComboBox</tt> instances to control outline
    and fill colors of the bars.
  </li>
  <li>
    how to use <tt class="class">QwtPlotZoomer</tt>.
  </li>
  <li>
    how to configure the <tt class="class">QwtPlotZoomer</tt> by attaching
   different sets of mouse events to different zoomer actions.
  </li>
</ul>

<p><img alt="BarPlotDemo Widget" src="examples/BarPlotDemo.png"
        width=500 height=500 border=1></p>


<h5><a href="examples/BodeDemo.py.html">BodeDemo.py</a> demonstrates</h5>
<ul>
  <li>
    improved rendering of scientific formula's by a combination of rich text
    and unicode.
  </li>
  <li>
    how to customize printing by derivation from
    <tt class="class">QwtPlotPrintFilter</tt>.    
  </li>
  <li>
    how to zoom on more than two scales. 
  </li>
</ul>

<p><img alt="BodeDemo Widget" src="examples/BodeDemo.png"
        width=540 height=468 border=1>
</p>

<p>Note:
<ol>
  <li>
    this example requires a font with some unicode support such as the
    <a href="http://corefonts.sourceforge.net">MicroSoft TrueType Core Fonts</a>
  </li>
  <li>
    the Verdana font is the best MicroSoft TrueType Core Font.
  </li>
  <li>
    use as much unicode as possible (get or buy a real unicode font).
  </li>
  <li>
    fall back on rich text if a requested glyph is missing from the font
    (sub-scripts are missing from the MicroSoft TrueType Core fonts).
  </li>
</ol> 
</p>


<h5><a href="examples/CartesionDemo">CartesianDemo.py</a> demonstates</h5>
<ul>
  <li>
    how to place the axes as in this
    <a href="http://en.wikipedia.org/wiki/Image:Cartesian-coordinate-system.svg"> example</a>
  </li>
</ul>

<p><img alt="CartesianDemo Widget" src="examples/CartesianDemo.png"
        width=400 height=300 border=1>
</p>


<h5><a href="examples/DataDemo.py.html">DataDemo.py</a> demonstrates</h5>
<ul>
  <li>
    how to use <tt class="class">QwtPlot</tt>.
  </li>
  <li>
    how to produce timer events.
  </li>
  <li>
    how to handle timer events by reimplementing
    <tt class="function">QObject.timerEvent()</tt>.
  </li>
</ul>

<p><img alt="DataPlotDemo Widget" src="examples/DataDemo.png"
        width=500 height=300 border=1>
</p>


<h5><a href="examples/ErrorBarDemo.py.html">ErrorBarDemo.py</a> demonstrates
</h5>

<ul>
  <li>
    how to implement a subclass of <tt class="class">QwtPlotCurve</tt> which
    has error bars in either no, or the x-, or the y-, or both directions. 
  </li>
  <li>
    how to make autoscaling take account of the error bars by reimplementing
    <tt class="function">QwtCurve.boundingRect()</tt>.
  </li>
</ul>

<p><img alt="ErrorBarDemo Widget" src="examples/ErrorBarDemo.png"
        width=400 height=300 border=1>
</p>


<h5><a href="examples/MaskedDataDemo.py.html">MaskedDataDemo.py</a> demonstrates
</h5>

<ul>
  <li>
    how to mask invalid data or data outside certain bounds when plottinh it.
  </li>
</ul>

<p><img alt="MaskedDataDemo Widget" src="examples/MaskedDataDemo.png"
        width=500 height=300 border=1>
</p>


<!--
Local Variables:
mode: HTML
fill-column: 79
End:
-->
