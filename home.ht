Title: PyQwt plots data with Numerical Python and PyQt

<h1>PyQwt plots data with Numerical Python and PyQt</h1>

<p>PyQwt is a set of Python bindings for the
<a href="http://qwt.sourceforge.net">Qwt</a>
C++ class library which extends the
<a href="http://www.trolltech.com/">Qt</a> framework with widgets for
scientific and engineering applications.
It provides a widget to plot 2-dimensional data and various widgets to display
and control bounded or unbounded floating point values.</p>

<p>It is highly recommended to use PyQwt with either
<a href="http://numpy.scipy.org/">NumPy</a>,
<a href=
"http://www.stsci.edu/resources/software_hardware/numarray">numarray</a>,
<a href="http://www.numpy.org">Numeric</a>, or any combination of those
packages.
The Numerical Python packages extend the Python language with new data types
to turn Python into an ideal language for numerical computing and
experimentation.
The beautiful general purpose programming language Python in combination
with the Numerical extensions and <a href="http://www.scipy.org">SciPy</a>
is as powerful as specialized tools like MatLab and IDL.</p>

<p>PyQwt addresses the problem of integrating
<a href="http://www.riverbankcomputing.co.uk/pyqt">PyQt</a>,
Qt, Qwt, the Numerical Python extensions and optionally
<a href="http://www.scipy.org">SciPy</a> in
a <a href="gui-examples.html">GUI Python application</a>
or in an <a href="cli-examples.html">interactive Python session</a>.</p>

<p>The <a href="doc/installation.html">documentation</a> explains how
to install PyQwt on MicroSoft Windows, MacOS/X and any POSIX system
supported by Qt (HPUX, Irix, Linux, Sun).
The <a href="download.html">download guide</a> has quick links
to the PyQwt releases and their prerequisites.</p>

<p>PyQwt integrates nicely with the
<a href="http://www.trolltech.com/products/qt/designer.html">Qt Designer</a>
(version 3.0 or higher) and the 
<a href="http://www.die-offenbachs.de/detlev/eric3.html">Eric</a>
integrated development environment.
The <a href="faq.html">FAQ</a> explains why PyQt's closed source
<a href="http://www.thekompany.com/products/blackadder/">Black Adder</a>
interactive development environment cannot be used with PyQwt.
</p>

<h3>Support for Qt-4</h3>

The snapshot <a href="http://prdownloads.sourceforge.net/pyqwt/PyQwt5-20061017.tar.gz?download">PyQwt5-20061017</a> has support for Qt-4.
</p>

<h1>PyQwt3D plots data in 3D</h1>

<p>PyQwt3D is a set of Python bindings for the
<a href="http://qwtplot3d.sourceforge.net">QwtPlot3D</a> C++ class library
which extends the <a href="http://www.trolltech.com/">Qt</a> framework with
widgets to visualize 3-dimensional data.
The <a href="pyqwt3d-examples.html"> examples</a> show how easy it is to
make a 3D plot and how to save a 3D plot to an image or an (E)PS/PDF file.
</p>

<p>The <a href="doc3d/install.html">installation instructions</a> explain how
to install
<a href="http://prdownloads.sourceforge.net/pyqwt/PyQwt3D-0.1.2.tar.gz?download">
PyQwt3D-0.1.2.tar.gz</a>.
</p>

<p>We like feedback on the interfacing between the QwtPlot3D API and Numerical
Python extensions.
</p>

<p>You should look into
<a href="http://ivupy.sourceforge.net">IVuPy (I-View-Py)</a>,
if you want more flexibility and speed in 3D data visualization.
</p>

<h3>Software using PyQwt</h3>

<p><a href="http://magix.fri.uni-lj.si/orange/">Orange</a>
is a component-based data mining software including a range of preprocessing,
modelling and data exploration techniques. It is based on C++ components, that
are accessed either directly (not very common), through Python scripts (easier
and better), or through GUI objects called Orange Widgets.</p>

<p><a href="http://profitpy.sourceforge.net">ProfitPy</a>
is a stock trading toolkit with a collector tool to gather data from the
<a href="http://www.interactivebrokers.com/php/main.php">Interactive Brokers</a>
<a href="http://www.interactivebrokers.com/php/tws/demo.php">Trader Workstation</a>
and with a coverage tool to test trading strategies.</p>

<p><a href="http://www.esrf.fr/computing/bliss/downloads/index.html">PyMCA</a> is an
interactive multi-channel analyzer for X-ray fluorescence spectra developed at
the
<a href="http://www.esrf.fr">European Synchrotron Facility</a>.
This
<a href="http://dale.chess.cornell.edu/chess-wiki/PyMca">PyMCA tutorial</a>
is a nice introduction of
<a href="http://sourceforge.net/projects/pymca/">PyMCA</a>.
</p>


<h3>Bug fixes and upgrades for PyQwt-4.1</h3>

<p><a href="patches/PyQwt-4.1a.patch">PyQwt-4.1a.patch</a>:
<ol>
<li>Adds the forgotten 'virtual QwtDoubleRect QwtCurve::boundingRect() const'.
</li>
<li>Adds the ErrorBarDemo.py example which redefines QwtCurve::boundingRect().
</li>
<li>Fixes zooming in the QwtImagePlotDemo.py example.</li>
</ol>
How to patch? Put PyQwt-4.1.tar.gz and PyQwt-4.1a.patch in the working
directory, and execute:
<pre class="cli">
tar xvfz PyQwt-4.1.tar.gz
patch -p0 -b -z .upgrade &lt;PyQwt-4.1a.patch
</pre>
and to make the ErrorBarDemo.py example executable, do:
<pre class="cli">
chmod +x PyQwt-4.1/examples/ErrorBarDemo.py
</pre>
and you are ready for the <a href="doc4/installation.html">installation
instructions</a>.
</p>


<h3>Bug fixes and upgrades for PyQwt-4.0rc0</h3>

<p><a href="patches/PyQwt-4.0rc0a.patch">PyQwt-4.0rc0a.patch</a> fixes:
<ol>
<li>Building of PyQwt-4.0rc0 against numarray-1.0 and numarray-1.1.</li>
<li>Building of PyQwt-4.0rc0 against Python-2.4 using setup.py.</li>
<li>A few bugs in the configure/build.py script.</li>
</ol>
How to patch? Put PyQwt-4.0rc0.tar.gz and PyQwt-4.0rc0a.patch in the working
directory, execute:
<pre class="cli">
tar xvfz PyQwt-4.0rc0.tar.gz
patch -p0 -b -z .upgrade &lt;PyQwt-4.0rc0a.patch
</pre>
and you are ready for the <a href="doc4/installation.html">installation
instructions</a>.
</p>


<h3>Bug fixes and upgrades for PyQwt-3.8</h3>

<p><a href="patches/PyQwt-3.8b.patch">PyQwt-3.8b.patch</a> fixes:
<ol>
<li>Building of PyQwt-3.8 for Posix platforms without an entry for QMAKE_RPATH
    in $QTDIR/mkspecs/default/qmake.conf.</li>
<li>Building of PyQwt-3.8 against numarray-1.0 and numarray-1.1.</li>
</ol>
How to patch? Put PyQwt-3.8.tar.gz and PyQwt-3.8b.patch in the working
directory, execute:
<pre class="cli">
tar xvfz PyQwt-3.8.tar.gz
patch -p0 -b -z .upgrade &lt;PyQwt-3.8b.patch
</pre>
and you are ready for the <a href="doc4/installation.html">installation
instructions</a>.
</p>


<h3>Bug fixes and upgrades for PyQwt-3.7</h3>

<p><a href="patches/PyQwt-3.7b.patch">PyQwt-3.7b.patch</a> fixes:
<ol>
<li>Building of PyQwt-3.7 for Qt &lt;= 3.2.1
    and/or PyQt &lt;=3.8.1 and sip &lt;= 3.8.</li>
<li>Building of PyQwt-3.7 for non-threaded Qt libraries on Posix.</li>
<li>Incompatibilities with Designer/pyuic generated forms using QwtPlot.</li>
<li>A minor bug on Windows concerning compiler flags.</li>
<li>A minor bug on Posix concerning compiler flags.</li>
<li>The PYTHONPATH awareness of the pyqt_distutils scripts.</li>
</ol>
How to patch? Put PyQwt-3.7.tar.gz and PyQwt-3.7b.patch in the working
directory, execute:
<pre class="cli">
tar xvfz PyQwt-3.7.tar.gz
patch -p0 -b -z .upgrade &lt;PyQwt-3.7b.patch
</pre>
and you are ready for the <a href="doc4/installation.html">installation
instructions</a>.
</p>

<!--
Local Variables:
mode: HTML
fill-column: 79
End:
-->
